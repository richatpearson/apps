//
//  PearsonPushNotifications.h
//  PearsonAppServicesiOSSDK
//
//  Copyright (c) 2013 Pearson. All rights reserved.
//
//

#import <Foundation/Foundation.h>
#import <PearsonAppServicesiOSSDK/PearsonClientResponse.h>
#import <PearsonAppServicesiOSSDK/PearsonUser.h>
#import <PearsonAppServicesiOSSDK/PearsonClientDelegate.h>
#import <PearsonAppServicesiOSSDK/PearsonClient.h>
#import "PearsonNotification.h"
#import "PearsonPushNotificationType.h"
#import "PearsonNotificationPreferences.h"
#import "PearsonDeviceRegistrationOperation.h"
#import "PearsonDeviceUnregistrationOperation.h"
#import "PearsonUserRegistrationOperation.h"
#import "PearsonDeviceUserConnectionOperation.h"
#import "PearsonDeviceUserDisconnectionOperation.h"
#import "PearsonUpdateDeviceEntityOperation.h"
#import "PearsonAddUserToGroupOperation.h"
#import "PearsonGetGroupOperation.h"
#import "PearsonCreateGroupOperation.h"
#import "PearsonRemoveUserFromGroupOperation.h"

#define kPN_PEARSON_PUSHNOTIFICATIONS_SDK_VERSION @"2.0.0"

/*!
 Type of Pearson Authentication used to gain an authorization token and user id.
 */
typedef enum : NSUInteger {
    /*!
     Authentication types include PI Services
     */
    PearsonPIAuthentication = 0,
    /*!
     Authentication type include Rumba, SMS
     */
    PearsonMIAuthentication = 1
   
} PearsonAuthenticationType;

/*!
 Top-level class for interfacing with the Pearson Push Notifications framework.
 The following are constants for the events generated by the PearsonPushNotifications framework:<br>
 `kPN_AppRegistrationRequest`<br>
 `kPN_AppUnregistrationRequest`<br>
 `kPN_DeviceRegistrationRequest`<br>
 `kPN_DeviceUnregistrationRequest`<br>
 `kPN_UserRegistrationRequest`<br>
 `kPN_UserUnregistrationRequest`<br>
 `kPN_UserDeviceConnectionRequest`<br>
 `kPN_UserDeviceDisconnectionRequest`<br>
 `kPN_UserDeviceReconnectionRequest`<br>
 `kPN_AddUserToGroupRequest`<br>
 `kPN_RemoveUserFromGroupRequest`<br>
 `kPN_RegisteredWithAppServices`<br>
 `kPN_UnregisteredWithAppServices`<br>
 `kPN_ReregisteredWithAppServices`<br>
 `kPN_DeviceEntityUpdateRequest`<br>
 `kPN_SaveNotificationPreferences`<br>
 `kPN_NetworkConnectionChange`<br>
 `kPN_NetworkReachable`<br>
 `kPN_NetworkUnreachable`<br>
 `kPN_PushNotificationReady`<br>
 `kPN_IncomingNotification`<br>
 */
@interface PearsonPushNotifications : NSObject <PearsonDeviceRegistrationDelegate,
                                                PearsonDeviceUnregistrationDelegate,
                                                PearsonUserRegistrationDelegate,
                                                PearsonDeviceUserConnectionDelegate,
                                                PearsonDeviceUserDisconnectionDelegate,
                                                PearsonUpdateDeviceEntityDelegate,
                                                PearsonAddUserToGroupDelegate,
                                                PearsonGetGroupDelegate,
                                                PearsonCreateGroupDelegate,
                                                PearsonRemoveUserFromGroupDelegate>
/*!
 PearsonPushNotification Events
 
 These events notifications are broadcast as a result of requests made.
 If the request was a success, a PearsonClientResponse object will be attached.
 If the request fails, an NSError object will be attached.
 */
extern NSString* const kPN_AppRegistrationRequest;
extern NSString* const kPN_AppUnregistrationRequest;
extern NSString* const kPN_DeviceRegistrationRequest;
extern NSString* const kPN_DeviceUnregistrationRequest;
extern NSString* const kPN_UserRegistrationRequest;
extern NSString* const kPN_UserUnregistrationRequest;
extern NSString* const kPN_UserDeviceConnectionRequest;
extern NSString* const kPN_UserDeviceDisconnectionRequest;
extern NSString* const kPN_UserDeviceReconnectionRequest;
extern NSString* const kPN_AddUserToGroupRequest;
extern NSString* const kPN_RemoveUserFromGroupRequest;
extern NSString* const kPN_RegisteredWithAppServices;
extern NSString* const kPN_UnregisteredWithAppServices;
extern NSString* const kPN_ReregisteredWithAppServices;
extern NSString* const kPN_DeviceEntityUpdateRequest;
extern NSString* const kPN_SaveNotificationPreferences;
extern NSString* const kPN_NetworkConnectionChange;
extern NSString* const kPN_NetworkReachable;
extern NSString* const kPN_NetworkUnreachable;
extern NSString* const kPN_PushNotificationReady;
extern NSString* const kPN_IncomingNotification;

/*!
 Default Notifier Entity name
 */
extern NSString* const kPN_NotifierName;

/*!
 Default base URL
 */
extern NSString* const kPN_PearsonDefaultNotificationBaseURL;

/*!
 Initializes an instance of the PearsonPushNotifications class. This method
 would normally be called from the AppDelegate method:
 `application:didFinishLaunchingWithOptions:`
 
 The sooner the instance can be created, the sooner the application registers
 with Apple Push Notification services (APNs).
 
 Using this method will disable all Monitoring options
 
 @param orgName Identifier for your organization
 @param appName Identifier for your application
 @param apiKey  Identifier for your apiKey supplied by GRID Mobile
 
 @return initialized instance of PearsonPushNotifications object
 
 @warning This method is deprecated in preference to those init methods which specifically set monitoring options.
 */
- (id) initWithOrganization:(NSString*)orgName
                application:(NSString*)appName
                     apiKey:(NSString*)apiKey __attribute__ ((deprecated));

/*!
 Initializes an instance of the PearsonPushNotifications class. This method would
 normally be called from the AppDelegate method `application:didFinishLaunchingWithOptions:`
 
 The sooner the instance can be created, the sooner the application registers
 with Apple Push Notification services (APNs).
 
 Using this method will disable all Monitoring options
 
 @param orgName Identifier for your organization
 @param appName Identifier for your application
 @param apiKey  Identifier for your apiKey supplied by GRID Mobile
 @param baseURL specified URL for the AppServices route
 
 @return initialized instance of PearsonPushNotifications object
 
 @warning This method is deprecated in preference to those init methods which specifically set monitoring options.
 */
- (id)initWithOrganization:(NSString*)orgName
               application:(NSString*)appName
                    apiKey:(NSString*)apiKey
                   baseURL:(NSString*)baseURL __attribute__ ((deprecated));

/*!
 Initializes an instance of the PearsonPushNotifications class. This method would
 normally be called from the AppDelegate method `application:didFinishLaunchingWithOptions:`
 
 The sooner the instance can be created, the sooner the application registers
 with Apple Push Notification services (APNs).
 
 @param orgName    Identifier for your organization
 @param appName    Identifier for your application
 @param apiKey     Identifier for your apiKey supplied by GRID Mobile
 @param monitoring YES or NO would turn Monitoring on or off
 
 @return initialized instance of PearsonPushNotifications object
 
 @warning This method can only enable the default Monitoring options.
 */
- (id) initWithOrganization:(NSString*)orgName
                application:(NSString*)appName
                     apiKey:(NSString*)apiKey
                 monitoring:(BOOL)monitoring;

/*!
 Initializes an instance of the PearsonPushNotifications class. This method
 would normally be called from the AppDelegate method: `application:didFinishLaunchingWithOptions: `
 
 The sooner the instance can be created, the sooner the application registers
 with Apple Push Notification services (APNs).
 
 This initialization method offers the greatest customization.
 
 @param orgName           Identifier for your organization
 @param appName           Identifier for your application
 @param apiKey            Identifier for your apiKey supplied by GRID Mobile
 @param monitoringOptions a custom configured MonitoringOptions object
 @param baseURL           specified URL for the AppServices route
 
 @return initialized instance of PearsonPushNotifications object.
 */
- (id) initWithOrganization:(NSString*)orgName
                application:(NSString*)appName
                     apiKey:(NSString*)apiKey
          monitoringOptions:(PearsonMonitoringOptions*)monitoringOptions
                    baseURL:(NSString*)baseURL;

/*!
 Turns on or off Debug logging for PearsonPushNotifications
 
 @param logging indicate if logs are to be generated for debugging
 */
- (void) showLogging:(BOOL)logging;

/*!
 Method to set the type of Authentication (GRID, MI, or PI).
 
 Important for setting the proper headers for http communication with APIs.
 
 @param pearsonAuthenticationType either PearsonPIAuthentication or PearsonMIAuthentication
 */
- (void) authenticationProvider:(PearsonAuthenticationType)pearsonAuthenticationType;

/*!
 Set the notifier name. If not set, the notifier name is set to "apple" by default.
 
 A notifier is an AppServices entity that carries a notification request along
 with credentials to the APNs notification service. This is not necessary if
 your app is not sending notifications.
 
 @param notifierName identifier for notifier name
 */
- (void) setNotifier:(NSString*)notifierName;

/*!
 Sets the flag to notify when a change in network connectivity changes.
 
 This is a helper method to make it easy to receive notifications when device
 is on and off line.
 
 @param alertMe YES indicates that an observer to Reachability changes should be registered. NO would remove an observer.
 */
- (void) notifyWhenNetworkChangesOccur:(BOOL)alertMe;

/*!
 To determine if it is ok to create groups
 
 @return value that denotes if it's ok to create groups
 */
- (BOOL) okToCreateGroups;

/*!
 Set the parameter that indicates if it is ok to create a group that doesn't
 exist but a user has tried to get added to.
 
 @param createGroups If YES, it is only ok to add a user to an existing group. It is not OK to create a new group to add the user to.
 */
- (void) onlyAddUserToExistingGroups:(BOOL)createGroups;

/*!
 Pass in the APNs device token from the App Delegate. After a successful
 registration with APNs, a device token is returned that identifies the device
 to APNs. This device token is required for registering with App Services.
 
 This method would normally be called from the AppDelegate's method
 `application:didRegisterForRemoteNotificationsWithDeviceToken:`
 
 @param application the UIApplication
 @param newDeviceToken the device token received from APNs as NSData
 */
- (void) application:(UIApplication*)application didRegisterWithNewDeviceToken:(NSData*)newDeviceToken;

/*!
 Informs the PushNotifications framework that the application failed to register
 with APS.
 
 This method should be called from the AppDelegate method
 `application:didFailToRegisterForRemoteNotificationsWithError:`
 
 @param application the UIApplication
 @param error the error returned from APNs
 */
- (void) application:(UIApplication*)application didFailToRegisterWithError:(NSError*)error;

/*!
 Handle incoming remote notifications to the application. Should be called by
 application:didReceiveRemoteNotification: in the AppDelegate.
 
 It is not necessary to implement this method if the application will be handling
 notification contents independently.
 
 This method decodes the userInfo dictionary into a PearsonNotification object
 and associates it with the current user's ID. If a badge value is included in
 the payload, the method will convert the incoming string to an integer and
 update the application with that data.
 
 A kIncomingNotification notification is then dispatched to all interested
 observers with the PearsonNotification object attached.
 
 To add an object as an observer, the following line of code would be added
 (AppDelegate's application:didFinshLaunchingWithOptions: method suggested):
 
 [[NSNotificationCenter defaultCenter] addObserver:self
                                          selector:@selector({Method name})
                                              name:kIncomingNotification
                                            object:nil];
 
 @param application UIApplication object
 @param userInfo    object pulled from the incoming notification
 
 @return the incoming userInfo dictionary parsed inot a PearsonNotificaton object
 */
- (PearsonNotification*) application:(UIApplication*)application didReceivePushNotification:(NSDictionary *)userInfo;

/*!
 *  Register the application with APNs (Apple Push Notification Services)
 *
 *  This method calls the UIApplication method registerForRemoteNotificationTypes:
 *
 *  @param notificationType The UIRemoteNotificationType that indicates what properties the app will respond to (Banners, Sounds, Alerts)
 *
 *  @see PearsonPushNotificationType.h
 */
- (void) registerApplicationWithAPN:(NSUInteger)notificationType;

/*!
 Unregister application with APNs.
 
 This method broadcasts a local NSNotification named kPN_AppUnregistrationRequest
 after it make the UIApplication call to unregister.
 
 @warning Apple advises that this method be called only in rare circumstances.
 Applications that unregister through this method can always re-register.
 */
- (void) unregisterApplicationWithAPN;

/*!
 Register a user with AppServices for Push Notifications. After a userId and 
 authorization token are obtained, the application can register with AppServices. 
 This method registers the user and device and then makes a connection between the two.
 It then stores any notification preferences to the device entity.
 
 @param authToken The current valid authorization token
 @param userId    Identifier for user obtained through authorization
 */
- (void) registerWithAppServicesUsingAuthorizationToken:(NSString*)authToken
                                                 userId:(NSString*)userId;

/*!
 Unregisters with AppServices for Push Notifications.
 
 This method will disconnect the user entity from the device entity and then
 delete the device entity. The user entity is never removed form the system.
 
 @param authToken The current valid authorization token
 @param userId    Identifier for user obtained through authorization
 */
- (void) unregisterWithAppServicesUsingAuthorizationToken:(NSString*)authToken
                                                   userId:(NSString*)userId;

/*!
 Re-register the user with their device in AppServices for Push Notifications.
 
 If a user was unregistered for push notifications during a session, it means
 that the user entity was disconnected from the device entity and the device
 entity was removed. This method is called to re-register the device entity
 and re-connect the user entity to it. It then restores the notification
 preferences to the stored device entity.
 
 @param authToken The current valid authorization token
 @param userId    Identifier for user obtained through authorization
 */
- (void) reregisterWithAppServicesUsingAuthorizationToken:(NSString*)authToken
                                                   userId:(NSString*)userId;

/*!
 Save notification preferences to AppServices
 
 @param preferences The PearsonNotificationPreferences object
 @param authToken   The current valid authorization token
 @warning Passing nil for the preferences parameter will upload whatever
 preferences object was last archived.
 */
- (void) saveNotificationPreferences:(PearsonNotificationPreferences*)preferences
                       withAuthToken:(NSString*)authToken;

/*!
 Save any notification preferences to App Services that might have been created
 by the user while offline (archived)
 
 @param authToken The current valid authorization token
 */
- (void) saveStoredNotificationPreferencesWithAuthToken:(NSString*)authToken;

/*!
 Add a user entity to a group entity
 
 @param userId    Identifier for user UUID
 @param groupName Identifier for the name of the group
 @param authToken The current valid authorization token
 */
- (void) addUserWithId:(NSString*)userId
          toGroupNamed:(NSString*)groupName
        usingAuthToken:(NSString*)authToken;

/*!
 Remove a user entity from a group entity that they are connected to
 
 @param userId    Identifier for user obtained through authorization
 @param groupName Identifier for the name of the group
 @param authToken The current valid authorization token
 */
- (void) removeUserWithId:(NSString*)userId
           fromGroupNamed:(NSString*)groupName
           usingAuthToken:(NSString*)authToken;

/*!
 Confirm that the application is registered with APNs for Push Notifications after starting up
 
 @return YES indicates that the application was successfully registered when it started up
 */
- (BOOL) applicationIsRegisteredForNotifications;

/*!
 Confirm that device is registered with App Services
 
 @return YES indicates that the device was successfully registered with AppServices
 */
- (BOOL) deviceIsRegisteredWithAppServices;

/*!
 Confirm that user is registered with App Services
 
 @return YES indicates that the user was successfully registered with AppServices
 */
- (BOOL) userIsRegisteredWithAppServices;

/*!
 Confirm if the user entity and device entity are connected in AppServices
 
 @return YES indicates that the user and device entities were successfully connected
 */
- (BOOL) userIsConnectedToDevice;

/*!
 Confirm that notification preferences have beenn updated
 
 @return YES indicates that preferences have been updated to the device entity
 */
- (BOOL) notificationPreferencesHaveBeenUpdated;

/*!
 The device token returned from APNs after the application has been registered
 
 @return NSString conversion of NSData object
 */
- (NSString*) deviceTokenString;

/*!
 The UUID for the user as returned from AppServices
 
 @return Universally Unique Identifiers are 128-bit values
 
 @warning This is not to be confused with the user ID returned from the authorization process
 */
- (NSString*) currentUserUUID;

/*!
 The UUID for the device as returned from AppServices
 
 @return Universally Unique Identifiers are 128-bit values
 */
- (NSString*) currentDeviceUUID;

/*!
 Retrieve an instance of the stored preferences object
 
 @return PearsonNotificationPreferences object
 */
- (PearsonNotificationPreferences*) notificationPreferences;

/*!
 Sets the incoming notification preferences object to the pushPreferences property and archives it for persistence
 
 @param preferences push notifications preferences object
 */
- (void) setNotificationPreferences:(PearsonNotificationPreferences*)preferences;

/*!
 Getter for obtaining an instance of the PearsonClient
 
 @return an initialized instance of the PearsonClient
 */
- (PearsonClient*) getPearsonClient;

@end

